

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_REPOSITORY: python-flask-app
  K8S_NAMESPACE: github-copilot-ns

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build_id: ${{ steps.build_tag.outputs.BUILD_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f requirements-test.txt ]; then
            pip install -r requirements-test.txt
          fi
      - name: Run Snyk security scan
        uses: snyk/actions/python-3.11@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
      - name: Run tests
        run: |
          python -m pytest test_app.py -v --junitxml=junit/test-results.xml
      - name: Run linting
        run: |
          python -m pylint app.py --exit-zero --output-format=parseable --reports=no > pylint-report.txt
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            junit/test-results.xml
            pylint-report.txt
      - name: Set build tag
        id: build_tag
        run: echo "BUILD_ID=$GITHUB_RUN_NUMBER" >> $GITHUB_ENV && echo "BUILD_ID=$GITHUB_RUN_NUMBER" >> $GITHUB_OUTPUT
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Check required secrets
        run: |
          echo "Checking required secrets..."
          if [ -z "${{ secrets.REGISTRY_LOGIN_SERVER }}" ]; then
            echo "❌ REGISTRY_LOGIN_SERVER secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.REGISTRY_USERNAME }}" ]; then
            echo "❌ REGISTRY_USERNAME secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.REGISTRY_PASSWORD }}" ]; then
            echo "❌ REGISTRY_PASSWORD secret is not set"
            exit 1
          fi
          echo "✅ All registry secrets are configured"
      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_REPOSITORY }} .
      - name: Tag Docker image
        run: |
          docker tag ${{ env.IMAGE_REPOSITORY }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_REPOSITORY }}:${{ env.BUILD_ID }}
      - name: Push Docker image to ACR
        run: |
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_REPOSITORY }}:${{ env.BUILD_ID }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }
      - name: Get AKS credentials
        env:
          AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
          AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
        run: |
          az aks get-credentials --resource-group "$AKS_RESOURCE_GROUP" --name "$AKS_CLUSTER_NAME"
      - name: Create namespace and secrets
        env:
          REGISTRY_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
        run: |
          kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
          kubectl delete secret acr-secret -n ${{ env.K8S_NAMESPACE }} --ignore-not-found=true
          kubectl create secret docker-registry acr-secret \
            --docker-server=$REGISTRY_LOGIN_SERVER \
            --docker-username=$REGISTRY_USERNAME \
            --docker-password=$REGISTRY_PASSWORD \
            --namespace=${{ env.K8S_NAMESPACE }}
          kubectl get secret acr-secret -n ${{ env.K8S_NAMESPACE }} -o yaml
      - name: Set image tag in deployment file
        run: |
          sed -i "s|REGISTRY_LOGIN_SERVER/python-flask-app:latest|${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_REPOSITORY }}:${{ needs.build.outputs.build_id }}|g" k8s-deployment.yaml
      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s-deployment.yaml
      - name: Wait for pod readiness
        run: |
          kubectl wait --for=condition=ready pod -l app=python-flask-app -n ${{ env.K8S_NAMESPACE }} --timeout=300s
      - name: Port-forward and health check
        run: |
          kubectl port-forward svc/python-flask-app-service 8080:80 -n ${{ env.K8S_NAMESPACE }} &
          sleep 10
          curl -f http://localhost:8080/ || exit 1
          echo "✅ Deployment successful and application is healthy!"
