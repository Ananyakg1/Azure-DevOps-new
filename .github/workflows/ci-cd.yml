name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

env:
  APP_NAME: python-flask-app
  IMAGE_NAME: python-flask-app
  NAMESPACE: github-copilot-ns

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build_id: ${{ steps.build_tag.outputs.BUILD_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run Python tests
        run: |
          python -m pytest test_app.py -v --tb=short

      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.IMAGE_NAME }}:latest

      - name: Snyk dependency vulnerability scan
        uses: snyk/actions/docker@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          args: --severity-threshold=high --exclude-app-vulns --policy-path=.snyk

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v2
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Set build tag
        id: build_tag
        run: |
          echo "BUILD_ID=$(echo $GITHUB_RUN_NUMBER)" >> $GITHUB_ENV
          echo "BUILD_ID=$GITHUB_RUN_NUMBER" >> $GITHUB_OUTPUT

      - name: Tag Docker image
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_ID }}

      - name: Push Docker image to ACR
        run: |
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_ID }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify secrets are set
        run: |
          echo "Checking if required secrets are set..."
          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ]; then
            echo "ERROR: AZURE_CLIENT_ID secret is not set"; exit 1; fi
          if [ -z "${{ secrets.AZURE_TENANT_ID }}" ]; then
            echo "ERROR: AZURE_TENANT_ID secret is not set"; exit 1; fi
          if [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then
            echo "ERROR: AZURE_SUBSCRIPTION_ID secret is not set"; exit 1; fi
          if [ -z "${{ secrets.AZURE_CLIENT_SECRET }}" ]; then
            echo "ERROR: AZURE_CLIENT_SECRET secret is not set"; exit 1; fi
          if [ -z "${{ secrets.AKS_RESOURCE_GROUP }}" ]; then
            echo "ERROR: AKS_RESOURCE_GROUP secret is not set"; exit 1; fi
          if [ -z "${{ secrets.AKS_CLUSTER_NAME }}" ]; then
            echo "ERROR: AKS_CLUSTER_NAME secret is not set"; exit 1; fi
          echo "All required secrets are set"

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az --version

      - name: Azure Login
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Verify Azure login
        run: |
          az account show
          az acr list --query "[].{Name:name,LoginServer:loginServer}" --output table

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }} --overwrite-existing

      - name: Set image tag in deployment file
        run: |
          sed -i "s|\${REGISTRY_LOGIN_SERVER}/${{ env.IMAGE_NAME }}:latest|${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.build_id }}|g" k8s-deployment.yaml

      - name: Deploy to AKS
        run: kubectl apply -f k8s-deployment.yaml

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/${{ env.APP_NAME }} -n ${{ env.NAMESPACE }} --timeout=300s
          kubectl get pods -n ${{ env.NAMESPACE }} -l app=${{ env.APP_NAME }}
          kubectl get svc -n ${{ env.NAMESPACE }}

      - name: Health check
        run: |
          kubectl wait --for=condition=ready pod -l app=${{ env.APP_NAME }} -n ${{ env.NAMESPACE }} --timeout=300s
          echo "Application deployed successfully!"

      - name: Get application URL
        run: |
          echo "Application is running in namespace: ${{ env.NAMESPACE }}"
          echo "Service name: ${{ env.APP_NAME }}-service"
          echo "To access the application, use port forwarding:"
          echo "kubectl port-forward svc/${{ env.APP_NAME }}-service 8080:80 -n ${{ env.NAMESPACE }}"
