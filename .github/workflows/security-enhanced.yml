name: Security-Enhanced CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  APP_NAME: python-flask-app
  IMAGE_NAME: python-flask-app
  NAMESPACE: github-copilot-ns

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit

    - name: Run Safety check (dependency vulnerabilities)
      run: safety check --file requirements.txt

    - name: Run Bandit security linter
      run: bandit -r . -f json -o bandit-report.json || true

    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      with:
        name: bandit-security-report
        path: bandit-report.json

    - name: Install Snyk CLI
      run: |
        curl -Lo snyk https://github.com/snyk/snyk/releases/latest/download/snyk-linux
        chmod +x snyk
        sudo mv snyk /usr/local/bin/

    - name: Authenticate with Snyk
      run: snyk auth ${{ secrets.SNYK_TOKEN }}

    - name: Snyk dependency scan
      run: snyk test --severity-threshold=medium --file=requirements.txt

    - name: Build Docker image for scanning
      run: docker build -t ${{ env.IMAGE_NAME }}:scan .

    - name: Snyk container scan
      run: snyk container test ${{ env.IMAGE_NAME }}:scan --severity-threshold=medium

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:scan
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-test:
    needs: security-scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run Python tests with coverage
      run: |
        python -m pytest test_app.py -v --cov=app --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.IMAGE_NAME }}:latest

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    - name: Login to Azure Container Registry
      run: |
        echo ${{ secrets.REGISTRY_PASSWORD }} | docker login ${{ secrets.REGISTRY_LOGIN_SERVER }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin

    - name: Push Docker image to ACR
      run: |
        docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest

    - name: Sign container image
      run: |
        # Install cosign
        curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
        sudo mv cosign-linux-amd64 /usr/local/bin/cosign
        sudo chmod +x /usr/local/bin/cosign
        
        # Sign the image (keyless signing)
        cosign sign --yes ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: '1.28.0'

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }} --overwrite-existing

    - name: Replace variables in deployment file
      run: |
        sed -i 's|${REGISTRY_LOGIN_SERVER}|${{ secrets.REGISTRY_LOGIN_SERVER }}|g' k8s-deployment.yaml
        sed -i 's|${IMAGE_NAME}|${{ env.IMAGE_NAME }}|g' k8s-deployment.yaml
        sed -i 's|${GITHUB_SHA}|${{ github.sha }}|g' k8s-deployment.yaml

    - name: Validate Kubernetes manifests
      run: |
        kubectl apply --dry-run=client -f k8s-deployment.yaml

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s-deployment.yaml

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/${{ env.APP_NAME }} -n ${{ env.NAMESPACE }} --timeout=300s
        kubectl get pods -n ${{ env.NAMESPACE }} -l app=${{ env.APP_NAME }}
        kubectl get svc -n ${{ env.NAMESPACE }} ${{ env.APP_NAME }}-service

    - name: Run security compliance checks
      run: |
        # Check for non-root user
        kubectl get deployment ${{ env.APP_NAME }} -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.template.spec.securityContext.runAsNonRoot}'
        
        # Check resource limits
        kubectl get deployment ${{ env.APP_NAME }} -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.template.spec.containers[0].resources.limits}'

    - name: Health check
      run: |
        kubectl wait --for=condition=ready pod -l app=${{ env.APP_NAME }} -n ${{ env.NAMESPACE }} --timeout=300s
        echo "Application deployed successfully!"

    - name: Post-deployment security scan
      run: |
        # Get pod name
        POD_NAME=$(kubectl get pods -n ${{ env.NAMESPACE }} -l app=${{ env.APP_NAME }} -o jsonpath='{.items[0].metadata.name}')
        
        # Check if pod is running as non-root
        kubectl exec $POD_NAME -n ${{ env.NAMESPACE }} -- id

  cleanup:
    needs: [security-scan, build-and-test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Clean up old images
      run: |
        echo "Cleanup job would remove old container images"
        # This would be implemented based on your retention policy
