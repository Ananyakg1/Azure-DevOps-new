trigger:
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - README.md
    - docs/*

variables:
- group: 'azure-config'
- name: 'APP_NAME'
  value: 'python-flask-app'
- name: 'BUILD_ID'
  value: $(Build.BuildId)
- name: 'IMAGE_NAME'
  value: '$(ACR_NAME).azurecr.io/$(APP_NAME)'
- name: 'IMAGE_TAG'
  value: '$(BUILD_ID)'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  displayName: 'Build and Security Scan'
  jobs:
  - job: BuildAndScan
    displayName: 'Build Docker Image and Security Scan'
    steps:
    
    # Checkout code
    - checkout: self
      fetchDepth: '1'
    
    # Set up Python environment
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.11'
      displayName: 'Use Python 3.11'
    
    # Install Python dependencies
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
      displayName: 'Install Python dependencies'
    
    # Run Python tests
    - script: |
        python -m pytest test_app.py -v --tb=short
      displayName: 'Run Python tests'
    
    # Install Snyk CLI
    - script: |
        curl -Lo snyk https://github.com/snyk/snyk/releases/latest/download/snyk-linux
        chmod +x snyk
        sudo mv snyk /usr/local/bin/
      displayName: 'Install Snyk CLI'
    
    # Authenticate with Snyk
    - script: |
        snyk auth $(SNYK_TOKEN)
      displayName: 'Authenticate with Snyk'
      env:
        SNYK_TOKEN: $(SNYK_TOKEN)
    
    # Snyk dependency scan
    - script: |
        snyk test --severity-threshold=high --file=requirements.txt
      displayName: 'Snyk dependency vulnerability scan'
      continueOnError: 'true'
    
    # Install Docker
    - task: DockerInstaller@0
      inputs:
        dockerVersion: '20.10.7'
        releaseType: 'stable'
    
    # Build Docker image
    - script: |
        docker build -t $(IMAGE_NAME):$(IMAGE_TAG) .
        docker tag $(IMAGE_NAME):$(IMAGE_TAG) $(IMAGE_NAME):latest
      displayName: 'Build Docker image'
    
    # Snyk container scan
    - script: |
        snyk container test $(IMAGE_NAME):$(IMAGE_TAG) --severity-threshold=high
      displayName: 'Snyk container vulnerability scan'
      continueOnError: 'true'
    
    # Azure login
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'azure-service-connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr login --name $(ACR_NAME)
      displayName: 'Azure login and ACR login'
    
    # Push Docker image to ACR
    - script: |
        docker push $(IMAGE_NAME):$(IMAGE_TAG)
        docker push $(IMAGE_NAME):latest
      displayName: 'Push Docker image to ACR'
    
    # Generate security report
    - script: |
        snyk monitor --file=requirements.txt
        snyk container monitor $(IMAGE_NAME):$(IMAGE_TAG)
      displayName: 'Generate Snyk security report'
      continueOnError: 'true'

- stage: Deploy
  displayName: 'Deploy to Kubernetes'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployToAKS
    displayName: 'Deploy to AKS'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          
          # Install kubectl
          - task: KubectlInstaller@0
            inputs:
              kubectlVersion: '1.28.0'
            displayName: 'Install kubectl'
          
          # Azure login and get AKS credentials
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'azure-service-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials --resource-group $(AKS_RESOURCE_GROUP) --name $(AKS_CLUSTER_NAME) --overwrite-existing
            displayName: 'Get AKS credentials'
          
          # Replace variables in deployment file
          - script: |
              sed -i 's/${ACR_NAME}/$(ACR_NAME)/g' k8s-deployment.yaml
              sed -i 's/${BUILD_ID}/$(BUILD_ID)/g' k8s-deployment.yaml
            displayName: 'Replace variables in deployment file'
          
          # Deploy to Kubernetes
          - script: |
              kubectl apply -f k8s-deployment.yaml
            displayName: 'Deploy to Kubernetes'
          
          # Verify deployment
          - script: |
              kubectl rollout status deployment/python-flask-app -n github-copilot-ns --timeout=300s
              kubectl get pods -n github-copilot-ns -l app=python-flask-app
              kubectl get svc -n github-copilot-ns python-flask-app-service
            displayName: 'Verify deployment'
          
          # Run health check
          - script: |
              kubectl wait --for=condition=ready pod -l app=python-flask-app -n github-copilot-ns --timeout=300s
              echo "Application deployed successfully!"
            displayName: 'Health check'
